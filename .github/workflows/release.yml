name: Release
# on:
#   push:
#     tags:
#       - 'v*'

on:
  push:
    branches:
      - "*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-binaries:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
          - os: macos-latest
            rust_target: x86_64-apple-darwin
          - os: macos-latest
            rust_target: aarch64-apple-darwin
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - uses: JonasKruckenberg/tauri-build@v1
        id: tauri_build
        with:
          target: ${{ matrix.rust_target }}

      # The `artifacts` output can now be used by a different action to upload the artifacts
      - uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: "${{ join(fromJSON(steps.tauri_build.outputs.artifacts), '\n') }}"

  publish:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Download the previously uploaded artifacts
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: artifacts
          path: artifacts
      # And create a release with the artifacts attached
      - name: "create release"
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          draft: false
          files: ./artifacts/**/*
# jobs:
#   publish-tauri:
#     strategy:
#       fail-fast: false
#       matrix:
#         platform: [macos-latest, ubuntu-latest, windows-latest]
#     runs-on:
#       ${{ matrix.platform }}

#       # matrix:
#       #   platform: ['macos-latest']
#       #   # platform: ['macos-latest', 'windows-latest']
#       #   # platform: ['macos-latest', 'ubuntu-latest', 'windows-latest']

#     # runs-on: ${{ matrix.settings.platform }}
#     steps:
#       - uses: actions/checkout@v3
#       - name: setup node
#         uses: actions/setup-node@v3
#         with:
#           node-version: 16

#       - name: install Rust stable
#         uses: dtolnay/rust-toolchain@stable

#       - name: Rust cache
#         uses: swatinem/rust-cache@v2
#         with:
#           workspaces: "./src-tauri -> target"

#       # Install macos specific targets
#       - name: install arm64 rust target (macos only)
#         if: matrix.platform == 'macos-latest'
#         run: rustup target add aarch64-apple-darwin

#       - name: Sync node version and setup cache
#         uses: actions/setup-node@v3
#         with:
#           node-version: "lts/*"
#           cache: "yarn" # Set this to npm, yarn or pnpm.

#       - name: install dependencies (ubuntu only)
#         if: matrix.platform == 'ubuntu-latest'
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

#       - name: install app dependencies
#         run: yarn

#       - name: Build the full app
#         uses: tauri-apps/tauri-action@v0
#         with:
#           args: ${{ matrix.platform == 'macos-latest' && '--target universal-apple-darwin' || '' }}
#           tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
#           releaseName: "App v__VERSION__"
#           releaseBody: "See the assets to download this version and install."
#           releaseDraft: true
#           prerelease: false
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           # TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
#           # TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
#           # # required for macOS code signing
#           # ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
#           # APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
#           # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
#           # APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
#           # APPLE_ID: ${{ secrets.APPLE_ID }}
#           # APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
